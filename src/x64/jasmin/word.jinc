// ----------------------------------------------------------------------------
// Collection of helper functions related to 64 bit words.
//
// Notes/Todo:
// - All functions assume a little endian machine!
//
// Sources:
// - Ascon reference implementation (GitHub)
//   https://github.com/ascon/ascon-c
// ----------------------------------------------------------------------------

// Clear the [n] most significant bytes of a 64 bit word [x].
//
inline
fn clear_bytes(reg u64 x, reg u64 n) -> reg u64 {
    reg u64 _x, _m, _n;

    _x = x;
    _n = n * 8;
    _m = 0xffffffffffffffff;
    _m >>= _n;
    _x &= _m;

    return _x;
}

// Load a 64-bit word from memory at [addr].
// Bytes are swapped to represent the little endian format of memory.
//
inline
fn load_word(reg u64 addr) -> reg u64 {
    reg u64 _x;
    _x = [addr];
    _x = #BSWAP_64(_x);
    return _x;
}

// Store a 64-bit word [x] in memory at [addr].
// Bytes are swapped to represent the little endian format of memory.
//
inline
fn store_word(reg u64 x, reg u64 addr) {
    reg u64 _x;
    _x = x;
    _x = #BSWAP_64(_x);
    [addr] = _x;
}

// Load [n] bytes starting from [addr] interpreted as little endian.
//
// - [addr+0] therefore represents the most significant byte.
//
// Note: This method is only memory save if [addr] is 64 bit aligned!
//
inline
fn load_bytes(reg u64 addr, reg u64 n) -> reg u64 {
    reg u64 _x, _n, _t;

    _x = load_word(addr);
    _n = n * 8;
    _t = 0xffffffffffffffff;
    _t >>= _n;
    _t = !_t;
    _x &= _t;

    return _x;

    // Store individual bytes if not aligned by 64 bits
    //inline int i;
    //reg u64 _x, _t;
    //_x = 0;
    //for i = 0 to 8 {
    //  _x <<= 8;
    //  if (n > i) {
    //    _t = #MOVZX_u64u8((u8)[addr + i]);
    //    _x |= _t;
    //  }
    //}
    //return _x;
}

// Store [n] bytes of the 64 bit word [x]
// starting from [addr] interpreted as little endian.
//
// - [addr+0] therefore represents the most significant byte.
//
// Note: This method is only memory save if [addr] is 64 bit aligned!
//
inline
fn store_bytes(reg u64 x, reg u64 addr, reg u64 n) {
    reg u64 _x, _n, _t;

    _x = x;
    _n = n * 8;
    _t = 0xffffffffffffffff;
    _t >>= _n;
    _t = !_t;
    _x &= _t;

    store_word(_x, addr);

    // Load individual bytes if not aligned by 64 bits
    //inline int i, d;
    //
    //for i = 0 to 8 {
    //  d = 7 - i;
    //  if (n > d) {
    //    (u8)[addr + d] = x;
    //  }
    //  x >>= 8;
    //}
}

// Apply a padding of from 1||0* to a 64 bit word [x] of length [n].
//
// - Refering to the [n] most significant bytes of [x].
//
inline
fn pad(reg u64 x, reg u64 n) -> reg u64 {
    reg u64 _p, _n;
    _n = n * 8;
    _p = 0x8000000000000000;
    _p >>= _n;
    x ^= _p;
    return x;
}

// Given a value [x] return 0, else return u64::MAX
//
inline
fn not_zero(reg u64 x) -> reg u64 {
    reg u64 _t;
    _t = x;

    _t >>= 32; x |= _t; _t = x;
    _t >>= 16; x |= _t; _t = x;
    _t >>=  8; x |= _t;

    x &= 0xff;
    x -= 1;
    x >>= 8;
    x &= 0x1;
    x -= 1;

    return x;
}
