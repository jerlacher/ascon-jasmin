// ----------------------------------------------------------------------------
// Jasmin Implementation of the authenticated encryption scheme Ascon-128a
//
// See required implementations for detailed information.
// ----------------------------------------------------------------------------

param int ASCON_RATE = 16;
param int ASCON_IV_H   = 0x88220000;
param int ASCON_IV_L   = 0x00200000;

require "jasmin/ascon_aead.jinc"

// ----------------------------------------------------------------------------
// Ascon AEAD Encryption
//
// mp: [u32; 3] -> mp[0]: *const u8 -> len: mlen    (plaintext)
//              -> mp[1]: *mut u8   -> len: mlen+16 (ciphertext)
//              -> mp[2]: *const u8 -> len: alen    (associated data)
// p: [u8; 32]  -> nonce = p[0..2]; key = p[2..4] 
// clen: u32
// alen: u32
// ----------------------------------------------------------------------------
export
fn ascon_128_a_encrypt(reg u32 mp mlen alen p) -> reg u32 {
    reg u32 res, m, c, a;
    m = [mp];
    c = [mp+4];
    a = [mp+8];
    res = encrypt(m, c, mlen, a, alen, p);
    return res;
}

// ----------------------------------------------------------------------------
// Ascon AEAD Decryption
//
// mp: [u32; 3] -> mp[0]: *mut u8   -> len: clen-16 (plaintext)
//              -> mp[1]: *const u8 -> len: clen    (ciphertext)
//              -> mp[2]: *const u8 -> len: alen    (associated data)
// p: [u8; 32]  -> nonce = p[0..2]; key = p[2..4] 
// clen: u32
// alen: u32
// ----------------------------------------------------------------------------
export
fn ascon_128_a_decrypt(reg u32 mp clen alen p) -> reg u32 {
    reg u32 res, m, c, a;
    m = [mp];
    c = [mp+4];
    a = [mp+8];
    res = decrypt(m, c, clen, a, alen, p);
    return res;
}
